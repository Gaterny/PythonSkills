装饰器的主要作用是在不改变原有函数的结构和功能的情况下动态的为函数实现额外的功能。

1.不带参数的装饰器
example1：

def deco(func):
	def wrapper(*args, **kwargs):
		print('<function name: {}'.format(func.__name__)
		func(*args, **kwargs)
	return wrapper
	
@deco
def foo(a):
	print(a)

#调用过程：
 deco(foo) --> return foo -->foo((*args, **kwargs)
	
2.带参数的装饰器
def deco(*args, **kwargs):
    def true_deco(func):            #此处才是真正的装饰器
    	def wrapper(*args, **kwargs):
            return func(*args, **kwargs)
        return wrapper
    return true_deco

@deco(1,3)
def hello():
    print('done')
	
#调用过程：
 deco(*args, **kwargs)(hello) --> return hello -->hello((*args, **kwargs)
 
 3.类装饰器
 __init__ 传入函数做参数
__call__ 装饰处理
__get__ 创建一个绑定方法对象（可选）

class ClassDeco(object):
	def __init__(self, func, *args, **kwargs):
		self.func = func
		self.args = args
		self.kwargs = kwargs
		
	def __call__(self, *args, **kwargs):
		return self.func(*args, **kwargs)
		# return self.__wrapped__((*args, **kwargs)     python3中才有的__wrapped__方法
@ClassDeco
def foo():
	pass
	
# 调用过程：
myfoo = ClassDeco(func) -->myfoo(*args, **kwargs)
__call__方法的作用就是使得实例是可被调用的，即callable的

实现方式2：
class ClassDeco(object):
	def __init__(self, *args, **kwargs):
		self.func = func
		self.args = args
		self.kwargs = kwargs
		
	def __call__(self, func, *args, **kwargs):
		def wrapper((*args, **kwargs):
			return func(*args, **kwargs)
		return wrapper
		
@ClassDeco(a, b)
def foo():
	pass
	
# 调用过程：
myfoo = ClassDeco(a ,b)(func) -->myfoo(*args, **kwargs)
